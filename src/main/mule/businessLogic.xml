<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:microsoft-dynamics-crm="http://www.mulesoft.org/schema/mule/microsoft-dynamics-crm"
      xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce" xmlns:email="http://www.mulesoft.org/schema/mule/email"
      xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/email http://www.mulesoft.org/schema/mule/email/current/mule-email.xsd
http://www.mulesoft.org/schema/mule/salesforce http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd
http://www.mulesoft.org/schema/mule/microsoft-dynamics-crm http://www.mulesoft.org/schema/mule/microsoft-dynamics-crm/current/mule-microsoft-dynamics-crm.xsd">
	<flow name="businesslogicFlow">
        <scatter-gather doc:name="Scatter-Gather" doc:id="30cbc768-5524-4535-981d-8131bd8da268" >
			<route >
				<salesforce:query doc:name="Query all contacts from Salesforce" doc:id="4b4b5272-89e1-4310-bfd3-89a1695f31ba" config-ref="Salesforce_Config">
					<salesforce:salesforce-query>SELECT Name, Email, Id  FROM Contact</salesforce:salesforce-query>
				</salesforce:query>
			</route>
			<route >
				<microsoft-dynamics-crm:retrieve-multiple-by-query doc:name="Retrieve Contacts from MS Dynamics CRM" doc:id="7eb3ff9b-80d9-4186-99a4-fea4aef66efc" config-ref="Microsoft_Dynamics_CRM_Dynamics_CRM">
					<microsoft-dynamics-crm:query><![CDATA[dsql:SELECT contactid,emailaddress1,fullname,nickname FROM contact]]></microsoft-dynamics-crm:query>
				</microsoft-dynamics-crm:retrieve-multiple-by-query>
			</route>
		</scatter-gather>
		<ee:transform doc:name="Aggregate results and transform to CSV" doc:id="07aef216-cf04-4cb9-b30a-5909cc46fa03">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/csv separator=","
import mergeWith from dw::core::Objects
var contactsSfdc = payload["0"].payload map (contact) -> {
	"IDInSfdc": contact.Id,
	"Email": contact.Email,
	"NameInSfdc": contact.Name
}
var contactsMsdyn = payload["1"].payload map (contact) -> {
	"IDInMsdyn": contact.contactid,
	"Email": contact.emailaddress1,
	"NameInMsdyn": contact.fullname
}
var mergedItems =  (
                contactsSfdc map ((contact) -> contact mergeWith ((contactsMsdyn filter ($.Email == contact.Email))[0]
                    default {IDInMsdyn: "", NameInMsdyn: ""}
                ))
            ) distinctBy $.Email
            ++ (
                contactsMsdyn map ((contact) -> contact mergeWith ((contactsSfdc filter ($.Email == contact.Email))[0]
                    default {IDInSfdc: "", NameInSfdc: ""}
                ))
            ) distinctBy $.Email
fun sortBySourceExistence (contacts) = ((contacts map (contact) -> (
        contact ++ {
            sortValue:  if ((contact.IDInSfdc != "") and (contact.IDInMsdyn == "")) 1
                        else if ((contact.IDInMsdyn != "") and (contact.IDInSfdc == "")) 2
                        else 3
        }
    )
) orderBy $.sortValue ) map $ -"sortValue"
---
sortBySourceExistence(mergedItems) map (contact) -> {
	"Email": contact.Email,
	"IDInSfdc": contact.IDInSfdc,
    "NameInSfdc": contact.NameInSfdc,
	"IDInMsdyn": contact.IDInMsdyn,
    "NameInMsdyn": contact.NameInMsdyn
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
		<email:send config-ref="Gmail_SMTP" doc:name="Send aggregation result email" fromAddress="${mail.from}"
                    subject="${mail.subject}">
            <email:to-addresses>
                <email:to-address value="${mail.to}"/>
            </email:to-addresses>
            <email:body contentType="text/plain">
                <email:content><![CDATA[${mail.body}]]></email:content>
            </email:body>
            <email:attachments><![CDATA[#[{'${attachment.name}' : payload}]]]></email:attachments>

        </email:send>
    </flow>
    <flow name="mainFlow">
        <flow-ref doc:name="businesslogicFlow" name="businesslogicFlow"/>
        <error-handler>
            <on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" type="ANY">
                <flow-ref doc:name="errorHandlingFlow" name="errorHandlingFlow"/>
            </on-error-propagate>
        </error-handler>
    </flow>

</mule>

        